/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package org.opendaylight.netvirt.bgpmanager.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-04-09")
public class BfdConfigData implements org.apache.thrift.TBase<BfdConfigData, BfdConfigData._Fields>, java.io.Serializable, Cloneable, Comparable<BfdConfigData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BfdConfigData");

  private static final org.apache.thrift.protocol.TField BFD_CONFIG_DATA_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("bfdConfigDataVersion", org.apache.thrift.protocol.TType.BYTE, (short)1);
  private static final org.apache.thrift.protocol.TField BFD_RX_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bfdRxInterval", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BFD_FAILURE_THRESHOLD_FIELD_DESC = new org.apache.thrift.protocol.TField("bfdFailureThreshold", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField BFD_TX_INTERVAL_FIELD_DESC = new org.apache.thrift.protocol.TField("bfdTxInterval", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField BFD_DEBOUNCE_DOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("bfdDebounceDown", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField BFD_DEBOUNCE_UP_FIELD_DESC = new org.apache.thrift.protocol.TField("bfdDebounceUp", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField BFD_MULTIHOP_FIELD_DESC = new org.apache.thrift.protocol.TField("bfdMultihop", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BfdConfigDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BfdConfigDataTupleSchemeFactory());
  }

  public byte bfdConfigDataVersion; // required
  public int bfdRxInterval; // optional
  public byte bfdFailureThreshold; // optional
  public int bfdTxInterval; // optional
  public int bfdDebounceDown; // optional
  public int bfdDebounceUp; // optional
  public boolean bfdMultihop; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BFD_CONFIG_DATA_VERSION((short)1, "bfdConfigDataVersion"),
    BFD_RX_INTERVAL((short)2, "bfdRxInterval"),
    BFD_FAILURE_THRESHOLD((short)3, "bfdFailureThreshold"),
    BFD_TX_INTERVAL((short)4, "bfdTxInterval"),
    BFD_DEBOUNCE_DOWN((short)5, "bfdDebounceDown"),
    BFD_DEBOUNCE_UP((short)6, "bfdDebounceUp"),
    BFD_MULTIHOP((short)7, "bfdMultihop");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BFD_CONFIG_DATA_VERSION
          return BFD_CONFIG_DATA_VERSION;
        case 2: // BFD_RX_INTERVAL
          return BFD_RX_INTERVAL;
        case 3: // BFD_FAILURE_THRESHOLD
          return BFD_FAILURE_THRESHOLD;
        case 4: // BFD_TX_INTERVAL
          return BFD_TX_INTERVAL;
        case 5: // BFD_DEBOUNCE_DOWN
          return BFD_DEBOUNCE_DOWN;
        case 6: // BFD_DEBOUNCE_UP
          return BFD_DEBOUNCE_UP;
        case 7: // BFD_MULTIHOP
          return BFD_MULTIHOP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BFDCONFIGDATAVERSION_ISSET_ID = 0;
  private static final int __BFDRXINTERVAL_ISSET_ID = 1;
  private static final int __BFDFAILURETHRESHOLD_ISSET_ID = 2;
  private static final int __BFDTXINTERVAL_ISSET_ID = 3;
  private static final int __BFDDEBOUNCEDOWN_ISSET_ID = 4;
  private static final int __BFDDEBOUNCEUP_ISSET_ID = 5;
  private static final int __BFDMULTIHOP_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BFD_RX_INTERVAL,_Fields.BFD_FAILURE_THRESHOLD,_Fields.BFD_TX_INTERVAL,_Fields.BFD_DEBOUNCE_DOWN,_Fields.BFD_DEBOUNCE_UP,_Fields.BFD_MULTIHOP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BFD_CONFIG_DATA_VERSION, new org.apache.thrift.meta_data.FieldMetaData("bfdConfigDataVersion", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.BFD_RX_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("bfdRxInterval", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BFD_FAILURE_THRESHOLD, new org.apache.thrift.meta_data.FieldMetaData("bfdFailureThreshold", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.BFD_TX_INTERVAL, new org.apache.thrift.meta_data.FieldMetaData("bfdTxInterval", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BFD_DEBOUNCE_DOWN, new org.apache.thrift.meta_data.FieldMetaData("bfdDebounceDown", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BFD_DEBOUNCE_UP, new org.apache.thrift.meta_data.FieldMetaData("bfdDebounceUp", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BFD_MULTIHOP, new org.apache.thrift.meta_data.FieldMetaData("bfdMultihop", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BfdConfigData.class, metaDataMap);
  }

  public BfdConfigData() {
  }

  public BfdConfigData(
    byte bfdConfigDataVersion)
  {
    this();
    this.bfdConfigDataVersion = bfdConfigDataVersion;
    setBfdConfigDataVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BfdConfigData(BfdConfigData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bfdConfigDataVersion = other.bfdConfigDataVersion;
    this.bfdRxInterval = other.bfdRxInterval;
    this.bfdFailureThreshold = other.bfdFailureThreshold;
    this.bfdTxInterval = other.bfdTxInterval;
    this.bfdDebounceDown = other.bfdDebounceDown;
    this.bfdDebounceUp = other.bfdDebounceUp;
    this.bfdMultihop = other.bfdMultihop;
  }

  public BfdConfigData deepCopy() {
    return new BfdConfigData(this);
  }

  @Override
  public void clear() {
    setBfdConfigDataVersionIsSet(false);
    this.bfdConfigDataVersion = 0;
    setBfdRxIntervalIsSet(false);
    this.bfdRxInterval = 0;
    setBfdFailureThresholdIsSet(false);
    this.bfdFailureThreshold = 0;
    setBfdTxIntervalIsSet(false);
    this.bfdTxInterval = 0;
    setBfdDebounceDownIsSet(false);
    this.bfdDebounceDown = 0;
    setBfdDebounceUpIsSet(false);
    this.bfdDebounceUp = 0;
    setBfdMultihopIsSet(false);
    this.bfdMultihop = false;
  }

  public byte getBfdConfigDataVersion() {
    return this.bfdConfigDataVersion;
  }

  public BfdConfigData setBfdConfigDataVersion(byte bfdConfigDataVersion) {
    this.bfdConfigDataVersion = bfdConfigDataVersion;
    setBfdConfigDataVersionIsSet(true);
    return this;
  }

  public void unsetBfdConfigDataVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BFDCONFIGDATAVERSION_ISSET_ID);
  }

  /** Returns true if field bfdConfigDataVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetBfdConfigDataVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __BFDCONFIGDATAVERSION_ISSET_ID);
  }

  public void setBfdConfigDataVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BFDCONFIGDATAVERSION_ISSET_ID, value);
  }

  public int getBfdRxInterval() {
    return this.bfdRxInterval;
  }

  public BfdConfigData setBfdRxInterval(int bfdRxInterval) {
    this.bfdRxInterval = bfdRxInterval;
    setBfdRxIntervalIsSet(true);
    return this;
  }

  public void unsetBfdRxInterval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BFDRXINTERVAL_ISSET_ID);
  }

  /** Returns true if field bfdRxInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetBfdRxInterval() {
    return EncodingUtils.testBit(__isset_bitfield, __BFDRXINTERVAL_ISSET_ID);
  }

  public void setBfdRxIntervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BFDRXINTERVAL_ISSET_ID, value);
  }

  public byte getBfdFailureThreshold() {
    return this.bfdFailureThreshold;
  }

  public BfdConfigData setBfdFailureThreshold(byte bfdFailureThreshold) {
    this.bfdFailureThreshold = bfdFailureThreshold;
    setBfdFailureThresholdIsSet(true);
    return this;
  }

  public void unsetBfdFailureThreshold() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BFDFAILURETHRESHOLD_ISSET_ID);
  }

  /** Returns true if field bfdFailureThreshold is set (has been assigned a value) and false otherwise */
  public boolean isSetBfdFailureThreshold() {
    return EncodingUtils.testBit(__isset_bitfield, __BFDFAILURETHRESHOLD_ISSET_ID);
  }

  public void setBfdFailureThresholdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BFDFAILURETHRESHOLD_ISSET_ID, value);
  }

  public int getBfdTxInterval() {
    return this.bfdTxInterval;
  }

  public BfdConfigData setBfdTxInterval(int bfdTxInterval) {
    this.bfdTxInterval = bfdTxInterval;
    setBfdTxIntervalIsSet(true);
    return this;
  }

  public void unsetBfdTxInterval() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BFDTXINTERVAL_ISSET_ID);
  }

  /** Returns true if field bfdTxInterval is set (has been assigned a value) and false otherwise */
  public boolean isSetBfdTxInterval() {
    return EncodingUtils.testBit(__isset_bitfield, __BFDTXINTERVAL_ISSET_ID);
  }

  public void setBfdTxIntervalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BFDTXINTERVAL_ISSET_ID, value);
  }

  public int getBfdDebounceDown() {
    return this.bfdDebounceDown;
  }

  public BfdConfigData setBfdDebounceDown(int bfdDebounceDown) {
    this.bfdDebounceDown = bfdDebounceDown;
    setBfdDebounceDownIsSet(true);
    return this;
  }

  public void unsetBfdDebounceDown() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BFDDEBOUNCEDOWN_ISSET_ID);
  }

  /** Returns true if field bfdDebounceDown is set (has been assigned a value) and false otherwise */
  public boolean isSetBfdDebounceDown() {
    return EncodingUtils.testBit(__isset_bitfield, __BFDDEBOUNCEDOWN_ISSET_ID);
  }

  public void setBfdDebounceDownIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BFDDEBOUNCEDOWN_ISSET_ID, value);
  }

  public int getBfdDebounceUp() {
    return this.bfdDebounceUp;
  }

  public BfdConfigData setBfdDebounceUp(int bfdDebounceUp) {
    this.bfdDebounceUp = bfdDebounceUp;
    setBfdDebounceUpIsSet(true);
    return this;
  }

  public void unsetBfdDebounceUp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BFDDEBOUNCEUP_ISSET_ID);
  }

  /** Returns true if field bfdDebounceUp is set (has been assigned a value) and false otherwise */
  public boolean isSetBfdDebounceUp() {
    return EncodingUtils.testBit(__isset_bitfield, __BFDDEBOUNCEUP_ISSET_ID);
  }

  public void setBfdDebounceUpIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BFDDEBOUNCEUP_ISSET_ID, value);
  }

  public boolean isBfdMultihop() {
    return this.bfdMultihop;
  }

  public BfdConfigData setBfdMultihop(boolean bfdMultihop) {
    this.bfdMultihop = bfdMultihop;
    setBfdMultihopIsSet(true);
    return this;
  }

  public void unsetBfdMultihop() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BFDMULTIHOP_ISSET_ID);
  }

  /** Returns true if field bfdMultihop is set (has been assigned a value) and false otherwise */
  public boolean isSetBfdMultihop() {
    return EncodingUtils.testBit(__isset_bitfield, __BFDMULTIHOP_ISSET_ID);
  }

  public void setBfdMultihopIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BFDMULTIHOP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BFD_CONFIG_DATA_VERSION:
      if (value == null) {
        unsetBfdConfigDataVersion();
      } else {
        setBfdConfigDataVersion((Byte)value);
      }
      break;

    case BFD_RX_INTERVAL:
      if (value == null) {
        unsetBfdRxInterval();
      } else {
        setBfdRxInterval((Integer)value);
      }
      break;

    case BFD_FAILURE_THRESHOLD:
      if (value == null) {
        unsetBfdFailureThreshold();
      } else {
        setBfdFailureThreshold((Byte)value);
      }
      break;

    case BFD_TX_INTERVAL:
      if (value == null) {
        unsetBfdTxInterval();
      } else {
        setBfdTxInterval((Integer)value);
      }
      break;

    case BFD_DEBOUNCE_DOWN:
      if (value == null) {
        unsetBfdDebounceDown();
      } else {
        setBfdDebounceDown((Integer)value);
      }
      break;

    case BFD_DEBOUNCE_UP:
      if (value == null) {
        unsetBfdDebounceUp();
      } else {
        setBfdDebounceUp((Integer)value);
      }
      break;

    case BFD_MULTIHOP:
      if (value == null) {
        unsetBfdMultihop();
      } else {
        setBfdMultihop((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BFD_CONFIG_DATA_VERSION:
      return getBfdConfigDataVersion();

    case BFD_RX_INTERVAL:
      return getBfdRxInterval();

    case BFD_FAILURE_THRESHOLD:
      return getBfdFailureThreshold();

    case BFD_TX_INTERVAL:
      return getBfdTxInterval();

    case BFD_DEBOUNCE_DOWN:
      return getBfdDebounceDown();

    case BFD_DEBOUNCE_UP:
      return getBfdDebounceUp();

    case BFD_MULTIHOP:
      return isBfdMultihop();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BFD_CONFIG_DATA_VERSION:
      return isSetBfdConfigDataVersion();
    case BFD_RX_INTERVAL:
      return isSetBfdRxInterval();
    case BFD_FAILURE_THRESHOLD:
      return isSetBfdFailureThreshold();
    case BFD_TX_INTERVAL:
      return isSetBfdTxInterval();
    case BFD_DEBOUNCE_DOWN:
      return isSetBfdDebounceDown();
    case BFD_DEBOUNCE_UP:
      return isSetBfdDebounceUp();
    case BFD_MULTIHOP:
      return isSetBfdMultihop();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BfdConfigData)
      return this.equals((BfdConfigData)that);
    return false;
  }

  public boolean equals(BfdConfigData that) {
    if (that == null)
      return false;

    boolean this_present_bfdConfigDataVersion = true;
    boolean that_present_bfdConfigDataVersion = true;
    if (this_present_bfdConfigDataVersion || that_present_bfdConfigDataVersion) {
      if (!(this_present_bfdConfigDataVersion && that_present_bfdConfigDataVersion))
        return false;
      if (this.bfdConfigDataVersion != that.bfdConfigDataVersion)
        return false;
    }

    boolean this_present_bfdRxInterval = true && this.isSetBfdRxInterval();
    boolean that_present_bfdRxInterval = true && that.isSetBfdRxInterval();
    if (this_present_bfdRxInterval || that_present_bfdRxInterval) {
      if (!(this_present_bfdRxInterval && that_present_bfdRxInterval))
        return false;
      if (this.bfdRxInterval != that.bfdRxInterval)
        return false;
    }

    boolean this_present_bfdFailureThreshold = true && this.isSetBfdFailureThreshold();
    boolean that_present_bfdFailureThreshold = true && that.isSetBfdFailureThreshold();
    if (this_present_bfdFailureThreshold || that_present_bfdFailureThreshold) {
      if (!(this_present_bfdFailureThreshold && that_present_bfdFailureThreshold))
        return false;
      if (this.bfdFailureThreshold != that.bfdFailureThreshold)
        return false;
    }

    boolean this_present_bfdTxInterval = true && this.isSetBfdTxInterval();
    boolean that_present_bfdTxInterval = true && that.isSetBfdTxInterval();
    if (this_present_bfdTxInterval || that_present_bfdTxInterval) {
      if (!(this_present_bfdTxInterval && that_present_bfdTxInterval))
        return false;
      if (this.bfdTxInterval != that.bfdTxInterval)
        return false;
    }

    boolean this_present_bfdDebounceDown = true && this.isSetBfdDebounceDown();
    boolean that_present_bfdDebounceDown = true && that.isSetBfdDebounceDown();
    if (this_present_bfdDebounceDown || that_present_bfdDebounceDown) {
      if (!(this_present_bfdDebounceDown && that_present_bfdDebounceDown))
        return false;
      if (this.bfdDebounceDown != that.bfdDebounceDown)
        return false;
    }

    boolean this_present_bfdDebounceUp = true && this.isSetBfdDebounceUp();
    boolean that_present_bfdDebounceUp = true && that.isSetBfdDebounceUp();
    if (this_present_bfdDebounceUp || that_present_bfdDebounceUp) {
      if (!(this_present_bfdDebounceUp && that_present_bfdDebounceUp))
        return false;
      if (this.bfdDebounceUp != that.bfdDebounceUp)
        return false;
    }

    boolean this_present_bfdMultihop = true && this.isSetBfdMultihop();
    boolean that_present_bfdMultihop = true && that.isSetBfdMultihop();
    if (this_present_bfdMultihop || that_present_bfdMultihop) {
      if (!(this_present_bfdMultihop && that_present_bfdMultihop))
        return false;
      if (this.bfdMultihop != that.bfdMultihop)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_bfdConfigDataVersion = true;
    list.add(present_bfdConfigDataVersion);
    if (present_bfdConfigDataVersion)
      list.add(bfdConfigDataVersion);

    boolean present_bfdRxInterval = true && (isSetBfdRxInterval());
    list.add(present_bfdRxInterval);
    if (present_bfdRxInterval)
      list.add(bfdRxInterval);

    boolean present_bfdFailureThreshold = true && (isSetBfdFailureThreshold());
    list.add(present_bfdFailureThreshold);
    if (present_bfdFailureThreshold)
      list.add(bfdFailureThreshold);

    boolean present_bfdTxInterval = true && (isSetBfdTxInterval());
    list.add(present_bfdTxInterval);
    if (present_bfdTxInterval)
      list.add(bfdTxInterval);

    boolean present_bfdDebounceDown = true && (isSetBfdDebounceDown());
    list.add(present_bfdDebounceDown);
    if (present_bfdDebounceDown)
      list.add(bfdDebounceDown);

    boolean present_bfdDebounceUp = true && (isSetBfdDebounceUp());
    list.add(present_bfdDebounceUp);
    if (present_bfdDebounceUp)
      list.add(bfdDebounceUp);

    boolean present_bfdMultihop = true && (isSetBfdMultihop());
    list.add(present_bfdMultihop);
    if (present_bfdMultihop)
      list.add(bfdMultihop);

    return list.hashCode();
  }

  @Override
  public int compareTo(BfdConfigData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBfdConfigDataVersion()).compareTo(other.isSetBfdConfigDataVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBfdConfigDataVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bfdConfigDataVersion, other.bfdConfigDataVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBfdRxInterval()).compareTo(other.isSetBfdRxInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBfdRxInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bfdRxInterval, other.bfdRxInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBfdFailureThreshold()).compareTo(other.isSetBfdFailureThreshold());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBfdFailureThreshold()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bfdFailureThreshold, other.bfdFailureThreshold);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBfdTxInterval()).compareTo(other.isSetBfdTxInterval());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBfdTxInterval()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bfdTxInterval, other.bfdTxInterval);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBfdDebounceDown()).compareTo(other.isSetBfdDebounceDown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBfdDebounceDown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bfdDebounceDown, other.bfdDebounceDown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBfdDebounceUp()).compareTo(other.isSetBfdDebounceUp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBfdDebounceUp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bfdDebounceUp, other.bfdDebounceUp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBfdMultihop()).compareTo(other.isSetBfdMultihop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBfdMultihop()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bfdMultihop, other.bfdMultihop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BfdConfigData(");
    boolean first = true;

    sb.append("bfdConfigDataVersion:");
    sb.append(this.bfdConfigDataVersion);
    first = false;
    if (isSetBfdRxInterval()) {
      if (!first) sb.append(", ");
      sb.append("bfdRxInterval:");
      sb.append(this.bfdRxInterval);
      first = false;
    }
    if (isSetBfdFailureThreshold()) {
      if (!first) sb.append(", ");
      sb.append("bfdFailureThreshold:");
      sb.append(this.bfdFailureThreshold);
      first = false;
    }
    if (isSetBfdTxInterval()) {
      if (!first) sb.append(", ");
      sb.append("bfdTxInterval:");
      sb.append(this.bfdTxInterval);
      first = false;
    }
    if (isSetBfdDebounceDown()) {
      if (!first) sb.append(", ");
      sb.append("bfdDebounceDown:");
      sb.append(this.bfdDebounceDown);
      first = false;
    }
    if (isSetBfdDebounceUp()) {
      if (!first) sb.append(", ");
      sb.append("bfdDebounceUp:");
      sb.append(this.bfdDebounceUp);
      first = false;
    }
    if (isSetBfdMultihop()) {
      if (!first) sb.append(", ");
      sb.append("bfdMultihop:");
      sb.append(this.bfdMultihop);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BfdConfigDataStandardSchemeFactory implements SchemeFactory {
    public BfdConfigDataStandardScheme getScheme() {
      return new BfdConfigDataStandardScheme();
    }
  }

  private static class BfdConfigDataStandardScheme extends StandardScheme<BfdConfigData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BfdConfigData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // BFD_CONFIG_DATA_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.bfdConfigDataVersion = iprot.readByte();
              struct.setBfdConfigDataVersionIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BFD_RX_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bfdRxInterval = iprot.readI32();
              struct.setBfdRxIntervalIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BFD_FAILURE_THRESHOLD
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.bfdFailureThreshold = iprot.readByte();
              struct.setBfdFailureThresholdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BFD_TX_INTERVAL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bfdTxInterval = iprot.readI32();
              struct.setBfdTxIntervalIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BFD_DEBOUNCE_DOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bfdDebounceDown = iprot.readI32();
              struct.setBfdDebounceDownIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BFD_DEBOUNCE_UP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bfdDebounceUp = iprot.readI32();
              struct.setBfdDebounceUpIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BFD_MULTIHOP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bfdMultihop = iprot.readBool();
              struct.setBfdMultihopIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BfdConfigData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BFD_CONFIG_DATA_VERSION_FIELD_DESC);
      oprot.writeByte(struct.bfdConfigDataVersion);
      oprot.writeFieldEnd();
      if (struct.isSetBfdRxInterval()) {
        oprot.writeFieldBegin(BFD_RX_INTERVAL_FIELD_DESC);
        oprot.writeI32(struct.bfdRxInterval);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBfdFailureThreshold()) {
        oprot.writeFieldBegin(BFD_FAILURE_THRESHOLD_FIELD_DESC);
        oprot.writeByte(struct.bfdFailureThreshold);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBfdTxInterval()) {
        oprot.writeFieldBegin(BFD_TX_INTERVAL_FIELD_DESC);
        oprot.writeI32(struct.bfdTxInterval);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBfdDebounceDown()) {
        oprot.writeFieldBegin(BFD_DEBOUNCE_DOWN_FIELD_DESC);
        oprot.writeI32(struct.bfdDebounceDown);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBfdDebounceUp()) {
        oprot.writeFieldBegin(BFD_DEBOUNCE_UP_FIELD_DESC);
        oprot.writeI32(struct.bfdDebounceUp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBfdMultihop()) {
        oprot.writeFieldBegin(BFD_MULTIHOP_FIELD_DESC);
        oprot.writeBool(struct.bfdMultihop);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BfdConfigDataTupleSchemeFactory implements SchemeFactory {
    public BfdConfigDataTupleScheme getScheme() {
      return new BfdConfigDataTupleScheme();
    }
  }

  private static class BfdConfigDataTupleScheme extends TupleScheme<BfdConfigData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BfdConfigData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBfdConfigDataVersion()) {
        optionals.set(0);
      }
      if (struct.isSetBfdRxInterval()) {
        optionals.set(1);
      }
      if (struct.isSetBfdFailureThreshold()) {
        optionals.set(2);
      }
      if (struct.isSetBfdTxInterval()) {
        optionals.set(3);
      }
      if (struct.isSetBfdDebounceDown()) {
        optionals.set(4);
      }
      if (struct.isSetBfdDebounceUp()) {
        optionals.set(5);
      }
      if (struct.isSetBfdMultihop()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetBfdConfigDataVersion()) {
        oprot.writeByte(struct.bfdConfigDataVersion);
      }
      if (struct.isSetBfdRxInterval()) {
        oprot.writeI32(struct.bfdRxInterval);
      }
      if (struct.isSetBfdFailureThreshold()) {
        oprot.writeByte(struct.bfdFailureThreshold);
      }
      if (struct.isSetBfdTxInterval()) {
        oprot.writeI32(struct.bfdTxInterval);
      }
      if (struct.isSetBfdDebounceDown()) {
        oprot.writeI32(struct.bfdDebounceDown);
      }
      if (struct.isSetBfdDebounceUp()) {
        oprot.writeI32(struct.bfdDebounceUp);
      }
      if (struct.isSetBfdMultihop()) {
        oprot.writeBool(struct.bfdMultihop);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BfdConfigData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.bfdConfigDataVersion = iprot.readByte();
        struct.setBfdConfigDataVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bfdRxInterval = iprot.readI32();
        struct.setBfdRxIntervalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bfdFailureThreshold = iprot.readByte();
        struct.setBfdFailureThresholdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bfdTxInterval = iprot.readI32();
        struct.setBfdTxIntervalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.bfdDebounceDown = iprot.readI32();
        struct.setBfdDebounceDownIsSet(true);
      }
      if (incoming.get(5)) {
        struct.bfdDebounceUp = iprot.readI32();
        struct.setBfdDebounceUpIsSet(true);
      }
      if (incoming.get(6)) {
        struct.bfdMultihop = iprot.readBool();
        struct.setBfdMultihopIsSet(true);
      }
    }
  }

}

